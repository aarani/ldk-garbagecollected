name: Continuous Integration Checks

on: [push, pull_request]

jobs:
  c_sharp_linux:
    runs-on: ubuntu-latest
    # Ubuntu's version of clang doesn't support....anything that should work.
    # Ubuntu is an utter trash OS and should generally never be used for anything.
    # We also require dotnet so we use fedora
    container: debian:bookworm
    strategy:
      fail-fast: false
    steps:
      - name: Install required dependencies
        run: |
          apt-get update
          apt-get install -y wget
          wget https://packages.microsoft.com/config/debian/12/packages-microsoft-prod.deb -O packages-microsoft-prod.deb
          dpkg -i packages-microsoft-prod.deb
          apt-get update && apt-get install -y dotnet-sdk-8.0
          apt-get install -y g++-mingw-w64 gcc-mingw-w64 git which
          apt-get -y install lld git g++ clang llvm curl faketime
      - name: Install rust
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs > rustup.sh
          chmod +x ./rustup.sh
          ./rustup.sh -y
          . $HOME/.cargo/env
          rustup install 1.63.0
          rustup default 1.63.0
          rustup component add rust-src
          rustup target install aarch64-apple-darwin
          rustup target install x86_64-pc-windows-gnu
      - name: Checkout source code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Install cbindgen
        run: |
          . $HOME/.cargo/env
          git config --global safe.directory '*'
          git clone https://github.com/eqrion/cbindgen
          cd cbindgen/
          git checkout v0.20.0
          cargo update -p indexmap --precise "1.6.2" --verbose
          cargo install --locked --path .
      - name: Checkout Rust-Lightning and LDK-C-Bindings git
        run: |
          git config --global safe.directory '*'
          git config --global user.email "ldk-ci@example.com"
          git config --global user.name "LDK CI"
          # Note this is a different endpoint, as we need one non-upstream commit!
          git clone https://github.com/lightningdevkit/rust-lightning
          cd rust-lightning
          git checkout origin/0.0.121-bindings
          cd ..
          git clone https://github.com/lightningdevkit/ldk-c-bindings
          cd ldk-c-bindings
          git checkout 0.0.121
          cd lightning-c-bindings
          . $HOME/.cargo/env
          cargo update -p memchr --precise "2.5.0" --verbose
#      - name: Rebuild C bindings with STD
#        run: |
#          cd ldk-c-bindings
#          export LDK_C_BINDINGS_EXTRA_TARGETS=x86_64-pc-windows-gnu
#          export LDK_C_BINDINGS_EXTRA_TARGET_CCS=`pwd`/deterministic-build-wrappers/clang-x86_64-windows
#          ./genbindings.sh ../rust-lightning true
      - name: Fetch MacOS SDK
        run: |
          wget https://bitcoincore.org/depends-sources/sdks/Xcode-12.2-12B45b-extracted-SDK-with-libcxx-headers.tar.gz
          tar xvvf Xcode-12.2-12B45b-extracted-SDK-with-libcxx-headers.tar.gz
      - name: Rebuild bindings, and check the sample app builds + links
        run: |
          . $HOME/.cargo/env
          # rust-src doesn't distribute the rustlib Cargo.lock, but an empty
          # file seems to suffice to make `-Zbuild-std` happy.
          # touch /usr/lib/rustlib/src/rust/Cargo.lock
          cd ldk-c-bindings
          export LDK_C_BINDINGS_EXTRA_TARGETS=x86_64-pc-windows-gnu
          export LDK_C_BINDINGS_EXTRA_TARGET_CCS=`pwd`/deterministic-build-wrappers/clang-x86_64-windows
          MACOS_SDK="$PWD/Xcode-12.2-12B45b-extracted-SDK-with-libcxx-headers" ./genbindings.sh ../rust-lightning true
      - name: Remove checked-in source to ensure its correctly checked-in
        run: rm c_sharp/src/org/ldk/enums/*.cs c_sharp/src/org/ldk/impl/*.cs c_sharp/src/org/ldk/structs/*.cs
      - name: Build Windows C# Bindings
        run: |
          . $HOME/.cargo/env
          export LDK_GARBAGECOLLECTED_GIT_OVERRIDE="$(git describe --tag HEAD)"
          LDK_TARGET=x86_64-pc-windows-gnu ./genbindings.sh ./ldk-c-bindings/ c_sharp false false
      - name: Build Linux C# Bindings
        run: |
          . $HOME/.cargo/env
          export LDK_GARBAGECOLLECTED_GIT_OVERRIDE="$(git describe --tag HEAD)"
          ./genbindings.sh ./ldk-c-bindings/ c_sharp false false
      - name: Build MacOS C# Bindings
        run: |
          . $HOME/.cargo/env
          export LDK_GARBAGECOLLECTED_GIT_OVERRIDE="$(git describe --tag HEAD)"
          export CC="clang --target=aarch64-apple-darwin"
          export LDK_TARGET=aarch64-apple-darwin
          export LDK_TARGET_CPU=apple-a14
          ./genbindings.sh ./ldk-c-bindings/ c_sharp false false
      - uses: actions/upload-artifact@v3
        with:
          name: libldkcsharp
          path: libldkcsharp_release*.so
  c_sharp_macos:
    strategy:
      fail-fast: false
    runs-on: macos-14
    steps:
      - name: Install Rust components
        run: |
          rustup component add rust-src
      - name: Install other tools
        run: |
          brew install gnu-sed
          brew install libfaketime
          brew install llvm@17
      - name: Checkout source code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Install cbindgen
        run: cargo install cbindgen
      - name: Checkout Rust-Lightning and LDK-C-Bindings git
        run: |
          git config --global user.email "ldk-ci@example.com"
          git config --global user.name "LDK CI"
          # Note this is a different endpoint, as we need one non-upstream commit!
          git clone https://github.com/lightningdevkit/rust-lightning
          cd rust-lightning
          git checkout origin/0.0.121-bindings
          cd ..
          git clone https://github.com/lightningdevkit/ldk-c-bindings
          cd ldk-c-bindings
          git checkout 0.0.121
          cd lightning-c-bindings
          cargo update -p memchr --precise "2.5.0" --verbose
      - name: Build C bindings and check the sample app builds + links
        run: |
          export PATH="$HOMEBREW_PREFIX/opt/gnu-sed/libexec/gnubin:$PATH"
          export PATH="$HOMEBREW_PREFIX/opt/llvm/bin:$PATH"
          cd ldk-c-bindings
          ./genbindings.sh ../rust-lightning true skip-tests
      - name: Build
        run: |
          export PATH="$HOMEBREW_PREFIX/opt/gnu-sed/libexec/gnubin:$PATH"
          export PATH="$HOMEBREW_PREFIX/opt/llvm/bin:$PATH"
          export LDK_GARBAGECOLLECTED_GIT_OVERRIDE="$(git describe --tag HEAD)"
          ./genbindings.sh ./ldk-c-bindings/ c_sharp false false
      - uses: actions/upload-artifact@v3
        with:
          name: libldkcsharp
          path: libldkcsharp_release*.so
